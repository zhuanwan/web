"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[6634],{18462:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  A: () => (/* binding */ es)\n});\n\n// UNUSED EXPORTS: _rs\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(58168);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Children/toArray.js\nvar toArray = __webpack_require__(82546);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/warning.js\nvar warning = __webpack_require__(68210);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__(89379);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(82284);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/findDOMNode.js\nvar findDOMNode = __webpack_require__(66588);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/ref.js\nvar es_ref = __webpack_require__(8719);\n;// ./node_modules/rc-resize-observer/es/Collection.js\n\nvar CollectionContext = /*#__PURE__*/react.createContext(null);\n/**\n * Collect all the resize event from children ResizeObserver\n */\nfunction Collection(_ref) {\n  var children = _ref.children,\n    onBatchResize = _ref.onBatchResize;\n  var resizeIdRef = react.useRef(0);\n  var resizeInfosRef = react.useRef([]);\n  var onCollectionResize = react.useContext(CollectionContext);\n  var onResize = react.useCallback(function (size, element, data) {\n    resizeIdRef.current += 1;\n    var currentId = resizeIdRef.current;\n    resizeInfosRef.current.push({\n      size: size,\n      element: element,\n      data: data\n    });\n    Promise.resolve().then(function () {\n      if (currentId === resizeIdRef.current) {\n        onBatchResize === null || onBatchResize === void 0 || onBatchResize(resizeInfosRef.current);\n        resizeInfosRef.current = [];\n      }\n    });\n\n    // Continue bubbling if parent exist\n    onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(size, element, data);\n  }, [onBatchResize, onCollectionResize]);\n  return /*#__PURE__*/react.createElement(CollectionContext.Provider, {\n    value: onResize\n  }, children);\n}\n;// ./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js\n/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.Math === Math) {\r\n        return __webpack_require__.g;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\n/* harmony default export */ const ResizeObserver_es = (index);\n\n;// ./node_modules/rc-resize-observer/es/utils/observerUtil.js\n\n// =============================== Const ===============================\nvar elementListeners = new Map();\nfunction onResize(entities) {\n  entities.forEach(function (entity) {\n    var _elementListeners$get;\n    var target = entity.target;\n    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 || _elementListeners$get.forEach(function (listener) {\n      return listener(target);\n    });\n  });\n}\n\n// Note: ResizeObserver polyfill not support option to measure border-box resize\nvar resizeObserver = new ResizeObserver_es(onResize);\n\n// Dev env only\nvar _el = (/* unused pure expression or super */ null && ( false ? 0 : null)); // eslint-disable-line\nvar _rs = (/* unused pure expression or super */ null && ( false ? 0 : null)); // eslint-disable-line\n\n// ============================== Observe ==============================\nfunction observe(element, callback) {\n  if (!elementListeners.has(element)) {\n    elementListeners.set(element, new Set());\n    resizeObserver.observe(element);\n  }\n  elementListeners.get(element).add(callback);\n}\nfunction unobserve(element, callback) {\n  if (elementListeners.has(element)) {\n    elementListeners.get(element).delete(callback);\n    if (!elementListeners.get(element).size) {\n      resizeObserver.unobserve(element);\n      elementListeners.delete(element);\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(23029);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(92901);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(85501);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createSuper.js + 1 modules\nvar createSuper = __webpack_require__(49640);\n;// ./node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js\n\n\n\n\n\n/**\n * Fallback to findDOMNode if origin ref do not provide any dom element\n */\nvar DomWrapper = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.A)(DomWrapper, _React$Component);\n  var _super = (0,createSuper/* default */.A)(DomWrapper);\n  function DomWrapper() {\n    (0,classCallCheck/* default */.A)(this, DomWrapper);\n    return _super.apply(this, arguments);\n  }\n  (0,createClass/* default */.A)(DomWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return DomWrapper;\n}(react.Component);\n\n;// ./node_modules/rc-resize-observer/es/SingleObserver/index.js\n\n\n\n\n\n\n\n\nfunction SingleObserver(props, ref) {\n  var children = props.children,\n    disabled = props.disabled;\n  var elementRef = react.useRef(null);\n  var wrapperRef = react.useRef(null);\n  var onCollectionResize = react.useContext(CollectionContext);\n\n  // =========================== Children ===========================\n  var isRenderProps = typeof children === 'function';\n  var mergedChildren = isRenderProps ? children(elementRef) : children;\n\n  // ============================= Size =============================\n  var sizeRef = react.useRef({\n    width: -1,\n    height: -1,\n    offsetWidth: -1,\n    offsetHeight: -1\n  });\n\n  // ============================= Ref ==============================\n  var canRef = !isRenderProps && /*#__PURE__*/react.isValidElement(mergedChildren) && (0,es_ref/* supportRef */.f3)(mergedChildren);\n  var originRef = canRef ? (0,es_ref/* getNodeRef */.A9)(mergedChildren) : null;\n  var mergedRef = (0,es_ref/* useComposeRef */.xK)(originRef, elementRef);\n  var getDom = function getDom() {\n    var _elementRef$current;\n    return (0,findDOMNode/* default */.Ay)(elementRef.current) || (\n    // Support `nativeElement` format\n    elementRef.current && (0,esm_typeof/* default */.A)(elementRef.current) === 'object' ? (0,findDOMNode/* default */.Ay)((_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.nativeElement) : null) || (0,findDOMNode/* default */.Ay)(wrapperRef.current);\n  };\n  react.useImperativeHandle(ref, function () {\n    return getDom();\n  });\n\n  // =========================== Observe ============================\n  var propsRef = react.useRef(props);\n  propsRef.current = props;\n\n  // Handler\n  var onInternalResize = react.useCallback(function (target) {\n    var _propsRef$current = propsRef.current,\n      onResize = _propsRef$current.onResize,\n      data = _propsRef$current.data;\n    var _target$getBoundingCl = target.getBoundingClientRect(),\n      width = _target$getBoundingCl.width,\n      height = _target$getBoundingCl.height;\n    var offsetWidth = target.offsetWidth,\n      offsetHeight = target.offsetHeight;\n\n    /**\n     * Resize observer trigger when content size changed.\n     * In most case we just care about element size,\n     * let's use `boundary` instead of `contentRect` here to avoid shaking.\n     */\n    var fixedWidth = Math.floor(width);\n    var fixedHeight = Math.floor(height);\n    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {\n      var size = {\n        width: fixedWidth,\n        height: fixedHeight,\n        offsetWidth: offsetWidth,\n        offsetHeight: offsetHeight\n      };\n      sizeRef.current = size;\n\n      // IE is strange, right?\n      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;\n      var sizeInfo = (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, size), {}, {\n        offsetWidth: mergedOffsetWidth,\n        offsetHeight: mergedOffsetHeight\n      });\n\n      // Let collection know what happened\n      onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(sizeInfo, target, data);\n      if (onResize) {\n        // defer the callback but not defer to next frame\n        Promise.resolve().then(function () {\n          onResize(sizeInfo, target);\n        });\n      }\n    }\n  }, []);\n\n  // Dynamic observe\n  react.useEffect(function () {\n    var currentElement = getDom();\n    if (currentElement && !disabled) {\n      observe(currentElement, onInternalResize);\n    }\n    return function () {\n      return unobserve(currentElement, onInternalResize);\n    };\n  }, [elementRef.current, disabled]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/react.createElement(DomWrapper, {\n    ref: wrapperRef\n  }, canRef ? /*#__PURE__*/react.cloneElement(mergedChildren, {\n    ref: mergedRef\n  }) : mergedChildren);\n}\nvar RefSingleObserver = /*#__PURE__*/react.forwardRef(SingleObserver);\nif (false) {}\n/* harmony default export */ const es_SingleObserver = (RefSingleObserver);\n;// ./node_modules/rc-resize-observer/es/index.js\n\n\n\n\n\n\nvar INTERNAL_PREFIX_KEY = 'rc-observer-key';\n\n\nfunction es_ResizeObserver(props, ref) {\n  var children = props.children;\n  var childNodes = typeof children === 'function' ? [children] : (0,toArray/* default */.A)(children);\n  if (false) {}\n  return childNodes.map(function (child, index) {\n    var key = (child === null || child === void 0 ? void 0 : child.key) || \"\".concat(INTERNAL_PREFIX_KEY, \"-\").concat(index);\n    return /*#__PURE__*/react.createElement(es_SingleObserver, (0,esm_extends/* default */.A)({}, props, {\n      key: key,\n      ref: index === 0 ? ref : undefined\n    }), child);\n  });\n}\nvar RefResizeObserver = /*#__PURE__*/react.forwardRef(es_ResizeObserver);\nif (false) {}\nRefResizeObserver.Collection = Collection;\n/* harmony default export */ const es = (RefResizeObserver);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18462\n")},71559:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  jl: () => (/* reexport */ es_Circle)\n});\n\n// UNUSED EXPORTS: Line, default\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(58168);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__(89379);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__(80045);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(46942);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n;// ./node_modules/rc-progress/es/common.js\n\nvar defaultProps = {\n  percent: 0,\n  prefixCls: \'rc-progress\',\n  strokeColor: \'#2db7f5\',\n  strokeLinecap: \'round\',\n  strokeWidth: 1,\n  trailColor: \'#D9D9D9\',\n  trailWidth: 1,\n  gapPosition: \'bottom\'\n};\nvar useTransitionDuration = function useTransitionDuration() {\n  var pathsRef = (0,react.useRef)([]);\n  var prevTimeStamp = (0,react.useRef)(null);\n  (0,react.useEffect)(function () {\n    var now = Date.now();\n    var updated = false;\n    pathsRef.current.forEach(function (path) {\n      if (!path) {\n        return;\n      }\n      updated = true;\n      var pathStyle = path.style;\n      pathStyle.transitionDuration = \'.3s, .3s, .3s, .06s\';\n      if (prevTimeStamp.current && now - prevTimeStamp.current < 100) {\n        pathStyle.transitionDuration = \'0s, 0s\';\n      }\n    });\n    if (updated) {\n      prevTimeStamp.current = Date.now();\n    }\n  });\n  return pathsRef.current;\n};\n;// ./node_modules/rc-progress/es/Line.js\n\n\n\nvar _excluded = ["className", "percent", "prefixCls", "strokeColor", "strokeLinecap", "strokeWidth", "style", "trailColor", "trailWidth", "transition"];\n\n\n\nvar Line = function Line(props) {\n  var _defaultProps$props = (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, defaultProps), props),\n    className = _defaultProps$props.className,\n    percent = _defaultProps$props.percent,\n    prefixCls = _defaultProps$props.prefixCls,\n    strokeColor = _defaultProps$props.strokeColor,\n    strokeLinecap = _defaultProps$props.strokeLinecap,\n    strokeWidth = _defaultProps$props.strokeWidth,\n    style = _defaultProps$props.style,\n    trailColor = _defaultProps$props.trailColor,\n    trailWidth = _defaultProps$props.trailWidth,\n    transition = _defaultProps$props.transition,\n    restProps = (0,objectWithoutProperties/* default */.A)(_defaultProps$props, _excluded);\n\n  // eslint-disable-next-line no-param-reassign\n  delete restProps.gapPosition;\n  var percentList = Array.isArray(percent) ? percent : [percent];\n  var strokeColorList = Array.isArray(strokeColor) ? strokeColor : [strokeColor];\n  var paths = useTransitionDuration();\n  var center = strokeWidth / 2;\n  var right = 100 - strokeWidth / 2;\n  var pathString = "M ".concat(strokeLinecap === \'round\' ? center : 0, ",").concat(center, "\\n         L ").concat(strokeLinecap === \'round\' ? right : 100, ",").concat(center);\n  var viewBoxString = "0 0 100 ".concat(strokeWidth);\n  var stackPtg = 0;\n  return /*#__PURE__*/react.createElement("svg", (0,esm_extends/* default */.A)({\n    className: classnames_default()("".concat(prefixCls, "-line"), className),\n    viewBox: viewBoxString,\n    preserveAspectRatio: "none",\n    style: style\n  }, restProps), /*#__PURE__*/react.createElement("path", {\n    className: "".concat(prefixCls, "-line-trail"),\n    d: pathString,\n    strokeLinecap: strokeLinecap,\n    stroke: trailColor,\n    strokeWidth: trailWidth || strokeWidth,\n    fillOpacity: "0"\n  }), percentList.map(function (ptg, index) {\n    var dashPercent = 1;\n    switch (strokeLinecap) {\n      case \'round\':\n        dashPercent = 1 - strokeWidth / 100;\n        break;\n      case \'square\':\n        dashPercent = 1 - strokeWidth / 2 / 100;\n        break;\n      default:\n        dashPercent = 1;\n        break;\n    }\n    var pathStyle = {\n      strokeDasharray: "".concat(ptg * dashPercent, "px, 100px"),\n      strokeDashoffset: "-".concat(stackPtg, "px"),\n      transition: transition || \'stroke-dashoffset 0.3s ease 0s, stroke-dasharray .3s ease 0s, stroke 0.3s linear\'\n    };\n    var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];\n    stackPtg += ptg;\n    return /*#__PURE__*/react.createElement("path", {\n      key: index,\n      className: "".concat(prefixCls, "-line-path"),\n      d: pathString,\n      strokeLinecap: strokeLinecap,\n      stroke: color,\n      strokeWidth: strokeWidth,\n      fillOpacity: "0",\n      ref: function ref(elem) {\n        // https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\n        // React will call the ref callback with the DOM element when the component mounts,\n        // and call it with `null` when it unmounts.\n        // Refs are guaranteed to be up-to-date before componentDidMount or componentDidUpdate fires.\n\n        paths[index] = elem;\n      },\n      style: pathStyle\n    });\n  }));\n};\nif (false) {}\n/* harmony default export */ const es_Line = (Line);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(82284);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__(5544);\n// EXTERNAL MODULE: ./node_modules/rc-util/es/Dom/canUseDom.js\nvar canUseDom = __webpack_require__(20998);\n;// ./node_modules/rc-progress/es/hooks/useId.js\n\n\n\nvar uuid = 0;\n\n/** Is client side and not jsdom */\nvar isBrowserClient =  true && (0,canUseDom/* default */.A)();\n\n/** Get unique id for accessibility usage */\nfunction getUUID() {\n  var retId;\n\n  // Test never reach\n  /* istanbul ignore if */\n  if (isBrowserClient) {\n    retId = uuid;\n    uuid += 1;\n  } else {\n    retId = \'TEST_OR_SSR\';\n  }\n  return retId;\n}\n/* harmony default export */ const useId = (function (id) {\n  // Inner id for accessibility usage. Only work in client side\n  var _React$useState = react.useState(),\n    _React$useState2 = (0,slicedToArray/* default */.A)(_React$useState, 2),\n    innerId = _React$useState2[0],\n    setInnerId = _React$useState2[1];\n  react.useEffect(function () {\n    setInnerId("rc_progress_".concat(getUUID()));\n  }, []);\n  return id || innerId;\n});\n;// ./node_modules/rc-progress/es/Circle/PtgCircle.js\n\n\nvar Block = function Block(_ref) {\n  var bg = _ref.bg,\n    children = _ref.children;\n  return /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: \'100%\',\n      height: \'100%\',\n      background: bg\n    }\n  }, children);\n};\nfunction getPtgColors(color, scale) {\n  return Object.keys(color).map(function (key) {\n    var parsedKey = parseFloat(key);\n    var ptgKey = "".concat(Math.floor(parsedKey * scale), "%");\n    return "".concat(color[key], " ").concat(ptgKey);\n  });\n}\nvar PtgCircle = /*#__PURE__*/react.forwardRef(function (props, ref) {\n  var prefixCls = props.prefixCls,\n    color = props.color,\n    gradientId = props.gradientId,\n    radius = props.radius,\n    circleStyleForStack = props.style,\n    ptg = props.ptg,\n    strokeLinecap = props.strokeLinecap,\n    strokeWidth = props.strokeWidth,\n    size = props.size,\n    gapDegree = props.gapDegree;\n  var isGradient = color && (0,esm_typeof/* default */.A)(color) === \'object\';\n  var stroke = isGradient ? "#FFF" : undefined;\n\n  // ========================== Circle ==========================\n  var halfSize = size / 2;\n  var circleNode = /*#__PURE__*/react.createElement("circle", {\n    className: "".concat(prefixCls, "-circle-path"),\n    r: radius,\n    cx: halfSize,\n    cy: halfSize,\n    stroke: stroke,\n    strokeLinecap: strokeLinecap,\n    strokeWidth: strokeWidth,\n    opacity: ptg === 0 ? 0 : 1,\n    style: circleStyleForStack,\n    ref: ref\n  });\n\n  // ========================== Render ==========================\n  if (!isGradient) {\n    return circleNode;\n  }\n  var maskId = "".concat(gradientId, "-conic");\n  var fromDeg = gapDegree ? "".concat(180 + gapDegree / 2, "deg") : \'0deg\';\n  var conicColors = getPtgColors(color, (360 - gapDegree) / 360);\n  var linearColors = getPtgColors(color, 1);\n  var conicColorBg = "conic-gradient(from ".concat(fromDeg, ", ").concat(conicColors.join(\', \'), ")");\n  var linearColorBg = "linear-gradient(to ".concat(gapDegree ? \'bottom\' : \'top\', ", ").concat(linearColors.join(\', \'), ")");\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("mask", {\n    id: maskId\n  }, circleNode), /*#__PURE__*/react.createElement("foreignObject", {\n    x: 0,\n    y: 0,\n    width: size,\n    height: size,\n    mask: "url(#".concat(maskId, ")")\n  }, /*#__PURE__*/react.createElement(Block, {\n    bg: linearColorBg\n  }, /*#__PURE__*/react.createElement(Block, {\n    bg: conicColorBg\n  }))));\n});\nif (false) {}\n/* harmony default export */ const Circle_PtgCircle = (PtgCircle);\n;// ./node_modules/rc-progress/es/Circle/util.js\nvar VIEW_BOX_SIZE = 100;\nvar getCircleStyle = function getCircleStyle(perimeter, perimeterWithoutGap, offset, percent, rotateDeg, gapDegree, gapPosition, strokeColor, strokeLinecap, strokeWidth) {\n  var stepSpace = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;\n  var offsetDeg = offset / 100 * 360 * ((360 - gapDegree) / 360);\n  var positionDeg = gapDegree === 0 ? 0 : {\n    bottom: 0,\n    top: 180,\n    left: 90,\n    right: -90\n  }[gapPosition];\n  var strokeDashoffset = (100 - percent) / 100 * perimeterWithoutGap;\n  // Fix percent accuracy when strokeLinecap is round\n  // https://github.com/ant-design/ant-design/issues/35009\n  if (strokeLinecap === \'round\' && percent !== 100) {\n    strokeDashoffset += strokeWidth / 2;\n    // when percent is small enough (<= 1%), keep smallest value to avoid it\'s disappearance\n    if (strokeDashoffset >= perimeterWithoutGap) {\n      strokeDashoffset = perimeterWithoutGap - 0.01;\n    }\n  }\n  var halfSize = VIEW_BOX_SIZE / 2;\n  return {\n    stroke: typeof strokeColor === \'string\' ? strokeColor : undefined,\n    strokeDasharray: "".concat(perimeterWithoutGap, "px ").concat(perimeter),\n    strokeDashoffset: strokeDashoffset + stepSpace,\n    transform: "rotate(".concat(rotateDeg + offsetDeg + positionDeg, "deg)"),\n    transformOrigin: "".concat(halfSize, "px ").concat(halfSize, "px"),\n    transition: \'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s, opacity .3s ease 0s\',\n    fillOpacity: 0\n  };\n};\n;// ./node_modules/rc-progress/es/Circle/index.js\n\n\n\n\nvar Circle_excluded = ["id", "prefixCls", "steps", "strokeWidth", "trailWidth", "gapDegree", "gapPosition", "trailColor", "strokeLinecap", "style", "className", "strokeColor", "percent"];\n\n\n\n\n\n\nfunction toArray(value) {\n  var mergedValue = value !== null && value !== void 0 ? value : [];\n  return Array.isArray(mergedValue) ? mergedValue : [mergedValue];\n}\nvar Circle = function Circle(props) {\n  var _defaultProps$props = (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, defaultProps), props),\n    id = _defaultProps$props.id,\n    prefixCls = _defaultProps$props.prefixCls,\n    steps = _defaultProps$props.steps,\n    strokeWidth = _defaultProps$props.strokeWidth,\n    trailWidth = _defaultProps$props.trailWidth,\n    _defaultProps$props$g = _defaultProps$props.gapDegree,\n    gapDegree = _defaultProps$props$g === void 0 ? 0 : _defaultProps$props$g,\n    gapPosition = _defaultProps$props.gapPosition,\n    trailColor = _defaultProps$props.trailColor,\n    strokeLinecap = _defaultProps$props.strokeLinecap,\n    style = _defaultProps$props.style,\n    className = _defaultProps$props.className,\n    strokeColor = _defaultProps$props.strokeColor,\n    percent = _defaultProps$props.percent,\n    restProps = (0,objectWithoutProperties/* default */.A)(_defaultProps$props, Circle_excluded);\n  var halfSize = VIEW_BOX_SIZE / 2;\n  var mergedId = useId(id);\n  var gradientId = "".concat(mergedId, "-gradient");\n  var radius = halfSize - strokeWidth / 2;\n  var perimeter = Math.PI * 2 * radius;\n  var rotateDeg = gapDegree > 0 ? 90 + gapDegree / 2 : -90;\n  var perimeterWithoutGap = perimeter * ((360 - gapDegree) / 360);\n  var _ref = (0,esm_typeof/* default */.A)(steps) === \'object\' ? steps : {\n      count: steps,\n      gap: 2\n    },\n    stepCount = _ref.count,\n    stepGap = _ref.gap;\n  var percentList = toArray(percent);\n  var strokeColorList = toArray(strokeColor);\n  var gradient = strokeColorList.find(function (color) {\n    return color && (0,esm_typeof/* default */.A)(color) === \'object\';\n  });\n  var isConicGradient = gradient && (0,esm_typeof/* default */.A)(gradient) === \'object\';\n  var mergedStrokeLinecap = isConicGradient ? \'butt\' : strokeLinecap;\n  var circleStyle = getCircleStyle(perimeter, perimeterWithoutGap, 0, 100, rotateDeg, gapDegree, gapPosition, trailColor, mergedStrokeLinecap, strokeWidth);\n  var paths = useTransitionDuration();\n  var getStokeList = function getStokeList() {\n    var stackPtg = 0;\n    return percentList.map(function (ptg, index) {\n      var color = strokeColorList[index] || strokeColorList[strokeColorList.length - 1];\n      var circleStyleForStack = getCircleStyle(perimeter, perimeterWithoutGap, stackPtg, ptg, rotateDeg, gapDegree, gapPosition, color, mergedStrokeLinecap, strokeWidth);\n      stackPtg += ptg;\n      return /*#__PURE__*/react.createElement(Circle_PtgCircle, {\n        key: index,\n        color: color,\n        ptg: ptg,\n        radius: radius,\n        prefixCls: prefixCls,\n        gradientId: gradientId,\n        style: circleStyleForStack,\n        strokeLinecap: mergedStrokeLinecap,\n        strokeWidth: strokeWidth,\n        gapDegree: gapDegree,\n        ref: function ref(elem) {\n          // https://reactjs.org/docs/refs-and-the-dom.html#callback-refs\n          // React will call the ref callback with the DOM element when the component mounts,\n          // and call it with `null` when it unmounts.\n          // Refs are guaranteed to be up-to-date before componentDidMount or componentDidUpdate fires.\n\n          paths[index] = elem;\n        },\n        size: VIEW_BOX_SIZE\n      });\n    }).reverse();\n  };\n  var getStepStokeList = function getStepStokeList() {\n    // only show the first percent when pass steps\n    var current = Math.round(stepCount * (percentList[0] / 100));\n    var stepPtg = 100 / stepCount;\n    var stackPtg = 0;\n    return new Array(stepCount).fill(null).map(function (_, index) {\n      var color = index <= current - 1 ? strokeColorList[0] : trailColor;\n      var stroke = color && (0,esm_typeof/* default */.A)(color) === \'object\' ? "url(#".concat(gradientId, ")") : undefined;\n      var circleStyleForStack = getCircleStyle(perimeter, perimeterWithoutGap, stackPtg, stepPtg, rotateDeg, gapDegree, gapPosition, color, \'butt\', strokeWidth, stepGap);\n      stackPtg += (perimeterWithoutGap - circleStyleForStack.strokeDashoffset + stepGap) * 100 / perimeterWithoutGap;\n      return /*#__PURE__*/react.createElement("circle", {\n        key: index,\n        className: "".concat(prefixCls, "-circle-path"),\n        r: radius,\n        cx: halfSize,\n        cy: halfSize,\n        stroke: stroke,\n        strokeWidth: strokeWidth,\n        opacity: 1,\n        style: circleStyleForStack,\n        ref: function ref(elem) {\n          paths[index] = elem;\n        }\n      });\n    });\n  };\n  return /*#__PURE__*/react.createElement("svg", (0,esm_extends/* default */.A)({\n    className: classnames_default()("".concat(prefixCls, "-circle"), className),\n    viewBox: "0 0 ".concat(VIEW_BOX_SIZE, " ").concat(VIEW_BOX_SIZE),\n    style: style,\n    id: id,\n    role: "presentation"\n  }, restProps), !stepCount && /*#__PURE__*/react.createElement("circle", {\n    className: "".concat(prefixCls, "-circle-trail"),\n    r: radius,\n    cx: halfSize,\n    cy: halfSize,\n    stroke: trailColor,\n    strokeLinecap: mergedStrokeLinecap,\n    strokeWidth: trailWidth || strokeWidth,\n    style: circleStyle\n  }), stepCount ? getStepStokeList() : getStokeList());\n};\nif (false) {}\n/* harmony default export */ const es_Circle = (Circle);\n;// ./node_modules/rc-progress/es/index.js\n\n\n\n/* harmony default export */ const es = ({\n  Line: es_Line,\n  Circle: es_Circle\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///71559\n')},80427:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  z: () => (/* reexport */ Popup),\n  A: () => (/* binding */ rc_tooltip_es)\n});\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(46942);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n;// ./node_modules/rc-tooltip/es/Popup.js\n\n\nfunction Popup(props) {\n  var children = props.children,\n    prefixCls = props.prefixCls,\n    id = props.id,\n    innerStyle = props.overlayInnerStyle,\n    bodyClassName = props.bodyClassName,\n    className = props.className,\n    style = props.style;\n  return /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()("".concat(prefixCls, "-content"), className),\n    style: style\n  }, /*#__PURE__*/react.createElement("div", {\n    className: classnames_default()("".concat(prefixCls, "-inner"), bodyClassName),\n    id: id,\n    role: "tooltip",\n    style: innerStyle\n  }, typeof children === \'function\' ? children() : children));\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(58168);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js\nvar objectSpread2 = __webpack_require__(89379);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__(80045);\n// EXTERNAL MODULE: ./node_modules/@rc-component/trigger/es/index.js + 11 modules\nvar es = __webpack_require__(62427);\n;// ./node_modules/rc-tooltip/es/placements.js\nvar autoAdjustOverflowTopBottom = {\n  shiftX: 64,\n  adjustY: 1\n};\nvar autoAdjustOverflowLeftRight = {\n  adjustX: 1,\n  shiftY: true\n};\nvar targetOffset = [0, 0];\nvar placements = {\n  left: {\n    points: [\'cr\', \'cl\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  right: {\n    points: [\'cl\', \'cr\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  top: {\n    points: [\'bc\', \'tc\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  bottom: {\n    points: [\'tc\', \'bc\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  topLeft: {\n    points: [\'bl\', \'tl\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  leftTop: {\n    points: [\'tr\', \'tl\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  },\n  topRight: {\n    points: [\'br\', \'tr\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, -4],\n    targetOffset: targetOffset\n  },\n  rightTop: {\n    points: [\'tl\', \'tr\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomRight: {\n    points: [\'tr\', \'br\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  rightBottom: {\n    points: [\'bl\', \'br\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [4, 0],\n    targetOffset: targetOffset\n  },\n  bottomLeft: {\n    points: [\'tl\', \'bl\'],\n    overflow: autoAdjustOverflowTopBottom,\n    offset: [0, 4],\n    targetOffset: targetOffset\n  },\n  leftBottom: {\n    points: [\'br\', \'bl\'],\n    overflow: autoAdjustOverflowLeftRight,\n    offset: [-4, 0],\n    targetOffset: targetOffset\n  }\n};\n/* harmony default export */ const es_placements = ((/* unused pure expression or super */ null && (placements)));\n// EXTERNAL MODULE: ./node_modules/rc-util/es/hooks/useId.js\nvar useId = __webpack_require__(56855);\n;// ./node_modules/rc-tooltip/es/Tooltip.js\n\n\n\nvar _excluded = ["overlayClassName", "trigger", "mouseEnterDelay", "mouseLeaveDelay", "overlayStyle", "prefixCls", "children", "onVisibleChange", "afterVisibleChange", "transitionName", "animation", "motion", "placement", "align", "destroyTooltipOnHide", "defaultVisible", "getTooltipContainer", "overlayInnerStyle", "arrowContent", "overlay", "id", "showArrow", "classNames", "styles"];\n\n\n\n\n\n\n\nvar Tooltip = function Tooltip(props, ref) {\n  var overlayClassName = props.overlayClassName,\n    _props$trigger = props.trigger,\n    trigger = _props$trigger === void 0 ? [\'hover\'] : _props$trigger,\n    _props$mouseEnterDela = props.mouseEnterDelay,\n    mouseEnterDelay = _props$mouseEnterDela === void 0 ? 0 : _props$mouseEnterDela,\n    _props$mouseLeaveDela = props.mouseLeaveDelay,\n    mouseLeaveDelay = _props$mouseLeaveDela === void 0 ? 0.1 : _props$mouseLeaveDela,\n    overlayStyle = props.overlayStyle,\n    _props$prefixCls = props.prefixCls,\n    prefixCls = _props$prefixCls === void 0 ? \'rc-tooltip\' : _props$prefixCls,\n    children = props.children,\n    onVisibleChange = props.onVisibleChange,\n    afterVisibleChange = props.afterVisibleChange,\n    transitionName = props.transitionName,\n    animation = props.animation,\n    motion = props.motion,\n    _props$placement = props.placement,\n    placement = _props$placement === void 0 ? \'right\' : _props$placement,\n    _props$align = props.align,\n    align = _props$align === void 0 ? {} : _props$align,\n    _props$destroyTooltip = props.destroyTooltipOnHide,\n    destroyTooltipOnHide = _props$destroyTooltip === void 0 ? false : _props$destroyTooltip,\n    defaultVisible = props.defaultVisible,\n    getTooltipContainer = props.getTooltipContainer,\n    overlayInnerStyle = props.overlayInnerStyle,\n    arrowContent = props.arrowContent,\n    overlay = props.overlay,\n    id = props.id,\n    _props$showArrow = props.showArrow,\n    showArrow = _props$showArrow === void 0 ? true : _props$showArrow,\n    tooltipClassNames = props.classNames,\n    tooltipStyles = props.styles,\n    restProps = (0,objectWithoutProperties/* default */.A)(props, _excluded);\n  var mergedId = (0,useId/* default */.A)(id);\n  var triggerRef = (0,react.useRef)(null);\n  (0,react.useImperativeHandle)(ref, function () {\n    return triggerRef.current;\n  });\n  var extraProps = (0,objectSpread2/* default */.A)({}, restProps);\n  if (\'visible\' in props) {\n    extraProps.popupVisible = props.visible;\n  }\n  var getPopupElement = function getPopupElement() {\n    return /*#__PURE__*/react.createElement(Popup, {\n      key: "content",\n      prefixCls: prefixCls,\n      id: mergedId,\n      bodyClassName: tooltipClassNames === null || tooltipClassNames === void 0 ? void 0 : tooltipClassNames.body,\n      overlayInnerStyle: (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, overlayInnerStyle), tooltipStyles === null || tooltipStyles === void 0 ? void 0 : tooltipStyles.body)\n    }, overlay);\n  };\n  var getChildren = function getChildren() {\n    var child = react.Children.only(children);\n    var originalProps = (child === null || child === void 0 ? void 0 : child.props) || {};\n    var childProps = (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, originalProps), {}, {\n      \'aria-describedby\': overlay ? mergedId : null\n    });\n    return /*#__PURE__*/react.cloneElement(children, childProps);\n  };\n  return /*#__PURE__*/react.createElement(es/* default */.A, (0,esm_extends/* default */.A)({\n    popupClassName: classnames_default()(overlayClassName, tooltipClassNames === null || tooltipClassNames === void 0 ? void 0 : tooltipClassNames.root),\n    prefixCls: prefixCls,\n    popup: getPopupElement,\n    action: trigger,\n    builtinPlacements: placements,\n    popupPlacement: placement,\n    ref: triggerRef,\n    popupAlign: align,\n    getPopupContainer: getTooltipContainer,\n    onPopupVisibleChange: onVisibleChange,\n    afterPopupVisibleChange: afterVisibleChange,\n    popupTransitionName: transitionName,\n    popupAnimation: animation,\n    popupMotion: motion,\n    defaultPopupVisible: defaultVisible,\n    autoDestroy: destroyTooltipOnHide,\n    mouseLeaveDelay: mouseLeaveDelay,\n    popupStyle: (0,objectSpread2/* default */.A)((0,objectSpread2/* default */.A)({}, overlayStyle), tooltipStyles === null || tooltipStyles === void 0 ? void 0 : tooltipStyles.root),\n    mouseEnterDelay: mouseEnterDelay,\n    arrow: showArrow\n  }, extraProps), getChildren());\n};\n/* harmony default export */ const es_Tooltip = (/*#__PURE__*/(0,react.forwardRef)(Tooltip));\n;// ./node_modules/rc-tooltip/es/index.js\n\n\n\n/* harmony default export */ const rc_tooltip_es = (es_Tooltip);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///80427\n')},82599:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ child)\n});\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.fill.js\nvar es_array_fill = __webpack_require__(33771);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.array.map.js\nvar es_array_map = __webpack_require__(62062);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.keys.js\nvar es_object_keys = __webpack_require__(79432);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es.object.to-string.js\nvar es_object_to_string = __webpack_require__(26099);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(96540);\n// EXTERNAL MODULE: ./node_modules/antd/es/progress/index.js + 6 modules\nvar progress = __webpack_require__(6754);\n;// ./src/pages/post-message/child/index.module.less\n// extracted by mini-css-extract-plugin\n/* harmony default export */ const index_module = ({"page":"page___iAwXx","item":"item___Z69JK","progress-bar":"progress-bar___vxsLP","msg":"msg___YxS_1"});\n// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js\nvar jsx_runtime = __webpack_require__(74848);\n;// ./src/pages/post-message/child/index.jsx\n\n\n\n\n/* eslint-disable react/no-array-index-key */\n\n\n\n\nfunction Color() {\n  var r = Math.floor(Math.random() * 255);\n  var g = Math.floor(Math.random() * 255);\n  var b = Math.floor(Math.random() * 255);\n  return "rgba(" + r + "," + g + "," + b + ",0.5)";\n}\nvar Component = function Component() {\n  var percentRef = (0,react.useRef)(0);\n  var _useState = (0,react.useState)(0),\n    percent = _useState[0],\n    setPercent = _useState[1];\n  var timerRef = (0,react.useRef)(null);\n  var _useState2 = (0,react.useState)(\'\'),\n    msg = _useState2[0],\n    setMsg = _useState2[1];\n\n  // iframe向主页面发送数据\n  var sendMessage = function sendMessage() {\n    window.parent.postMessage(JSON.stringify({\n      type: \'show\'\n    }), \'*\' // 这里是主页面域名\n    );\n  };\n  var _addPercent = function addPercent() {\n    if (percentRef.current >= 100) {\n      clearTimeout(timerRef.current);\n      sendMessage();\n      return;\n    }\n    percentRef.current += 10;\n    setPercent(percentRef.current);\n    timerRef.current = setTimeout(function () {\n      _addPercent();\n    }, 1000);\n  };\n  (0,react.useEffect)(function () {\n    _addPercent();\n    return function () {\n      clearTimeout(timerRef.current);\n    };\n  }, []);\n  (0,react.useEffect)(function () {\n    // iframe接收数据\n    window.addEventListener(\'message\', function (e) {\n      try {\n        setMsg(e.data);\n        var params = JSON.parse(e.data);\n        console.log(\'我是iframe我接收到数据：\', params);\n      } catch (error) {\n        console.log(error);\n      }\n    });\n  }, []);\n  return /*#__PURE__*/(0,jsx_runtime.jsxs)("div", {\n    className: index_module.page,\n    children: [percentRef.current >= 100 ? Array(96).fill(\'\').map(function (ele, i) {\n      return /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n        className: index_module.item,\n        style: {\n          background: Color()\n        }\n      }, i);\n    }) : /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: index_module[\'progress-bar\'],\n      size: "large",\n      children: /*#__PURE__*/(0,jsx_runtime.jsx)(progress/* default */.A, {\n        percent: percentRef.current\n      })\n    }), /*#__PURE__*/(0,jsx_runtime.jsx)("div", {\n      className: index_module.msg,\n      children: msg\n    })]\n  });\n};\n/* harmony default export */ const child = (Component);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODI1OTkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7Ozs7Ozs7QUNEQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUFBO0FBSUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQTtBQUFBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFJQTtBQUFBO0FBQUE7QUFBQTtBQUdBO0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi9zcmMvcGFnZXMvcG9zdC1tZXNzYWdlL2NoaWxkL2luZGV4Lm1vZHVsZS5sZXNzPzRmMGYiLCJ3ZWJwYWNrOi8vd2ViLy4vc3JjL3BhZ2VzL3Bvc3QtbWVzc2FnZS9jaGlsZC9pbmRleC5qc3g/NDhjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcInBhZ2VcIjpcInBhZ2VfX19pQXdYeFwiLFwiaXRlbVwiOlwiaXRlbV9fX1o2OUpLXCIsXCJwcm9ncmVzcy1iYXJcIjpcInByb2dyZXNzLWJhcl9fX3Z4c0xQXCIsXCJtc2dcIjpcIm1zZ19fX1l4U18xXCJ9OyIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L25vLWFycmF5LWluZGV4LWtleSAqL1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCdcclxuaW1wb3J0IHsgUHJvZ3Jlc3MgfSBmcm9tICdhbnRkJ1xyXG5cclxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2luZGV4Lm1vZHVsZS5sZXNzJ1xyXG5cclxuZnVuY3Rpb24gQ29sb3IoKSB7XHJcbiAgY29uc3QgciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NSlcclxuICBjb25zdCBnID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU1KVxyXG4gIGNvbnN0IGIgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTUpXHJcbiAgcmV0dXJuIGByZ2JhKCR7cn0sJHtnfSwke2J9LDAuNSlgXHJcbn1cclxuXHJcbmNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcclxuICBjb25zdCBwZXJjZW50UmVmID0gdXNlUmVmKDApXHJcbiAgY29uc3QgW3BlcmNlbnQsIHNldFBlcmNlbnRdID0gdXNlU3RhdGUoMClcclxuICBjb25zdCB0aW1lclJlZiA9IHVzZVJlZihudWxsKVxyXG4gIGNvbnN0IFttc2csIHNldE1zZ10gPSB1c2VTdGF0ZSgnJylcclxuXHJcbiAgLy8gaWZyYW1l5ZCR5Li76aG16Z2i5Y+R6YCB5pWw5o2uXHJcbiAgY29uc3Qgc2VuZE1lc3NhZ2UgPSAoKSA9PiB7XHJcbiAgICB3aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKFxyXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgdHlwZTogJ3Nob3cnLFxyXG4gICAgICB9KSxcclxuICAgICAgJyonIC8vIOi/memHjOaYr+S4u+mhtemdouWfn+WQjVxyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgY29uc3QgYWRkUGVyY2VudCA9ICgpID0+IHtcclxuICAgIGlmIChwZXJjZW50UmVmLmN1cnJlbnQgPj0gMTAwKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lclJlZi5jdXJyZW50KVxyXG4gICAgICBzZW5kTWVzc2FnZSgpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgcGVyY2VudFJlZi5jdXJyZW50ICs9IDEwXHJcbiAgICBzZXRQZXJjZW50KHBlcmNlbnRSZWYuY3VycmVudClcclxuICAgIHRpbWVyUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgYWRkUGVyY2VudCgpXHJcbiAgICB9LCAxMDAwKVxyXG4gIH1cclxuXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGFkZFBlcmNlbnQoKVxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyUmVmLmN1cnJlbnQpXHJcbiAgICB9XHJcbiAgfSwgW10pXHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAvLyBpZnJhbWXmjqXmlLbmlbDmja5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBzZXRNc2coZS5kYXRhKVxyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IEpTT04ucGFyc2UoZS5kYXRhKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKCfmiJHmmK9pZnJhbWXmiJHmjqXmlLbliLDmlbDmja7vvJonLCBwYXJhbXMpXHJcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSwgW10pXHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnBhZ2V9PlxyXG4gICAgICB7cGVyY2VudFJlZi5jdXJyZW50ID49IDEwMCA/IChcclxuICAgICAgICBBcnJheSg5NilcclxuICAgICAgICAgIC5maWxsKCcnKVxyXG4gICAgICAgICAgLm1hcCgoZWxlLCBpKSA9PiA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLml0ZW19IGtleT17aX0gc3R5bGU9e3sgYmFja2dyb3VuZDogQ29sb3IoKSB9fSAvPilcclxuICAgICAgKSA6IChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzWydwcm9ncmVzcy1iYXInXX0gc2l6ZT1cImxhcmdlXCI+XHJcbiAgICAgICAgICA8UHJvZ3Jlc3MgcGVyY2VudD17cGVyY2VudFJlZi5jdXJyZW50fSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApfVxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5tc2d9Pnttc2d9PC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///82599\n')}}]);